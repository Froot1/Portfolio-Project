# Technical Documentation

## Table of Contents
1. [User Stories and Mockups](#user-stories-and-mockups)
2. [System Architecture](#system-architecture)
3. [Components, Classes, and Database Design](#components-classes-and-database-design)
4. [Sequence Diagrams](#sequence-diagrams)
5. [API Specifications](#api-specifications)
6. [SCM and QA Plans](#scm-and-qa-plans)
7. [Technical Justifications](#technical-justifications)

---

## User Stories and Mockups

### User Types

- Regular User: Can sign up, log in, add friends, join groups, add/view expenses, settle debts, and view profile.
- Group Creator: Can create groups, invite members, manage group activities.

### Prioritized User Stories

#### Authentication
- **[Must Have]** As a user, I want to sign up with my email and password, so that I can create an account and use the app.
- **[Must Have]** As a user, I want to log in securely, so that I can access my account and data.

#### Friend Management
- **[Must Have]** As a user, I want to add friends, so that I can easily split expenses with people I know.
- **[Should Have]** As a user, I want to view my friends list, so that I can see who I can share expenses with.

#### Group Management
- **[Must Have]** As a user, I want to create a group, so that I can manage shared expenses with multiple people.
- **[Should Have]** As a user, I want to join an existing group, so that I can participate in group expenses.
- **[Should Have]** As a group creator, I want to invite members to my group, so that we can track expenses together.

#### Expense/Activity Management
- **[Must Have]** As a user, I want to add an expense/activity to a group, so that everyoneâ€™s share is tracked automatically.
- **[Must Have]** As a user, I want to view all group activities, so that I can see the history of shared expenses.
- **[Must Have]** As a user, I want to see how much I owe or am owed, so that I can keep track of my balances.

#### Debt Settlement
- **[Should Have]** As a user, I want to settle up debts, so that I can clear what I owe or am owed with others.

#### Profile Management
- **[Could Have]** As a user, I want to view and edit my profile, so that I can manage my personal information.

### Main Screens for Mockups

- Login
- Signup
- Home (dashboard)
- All Activity
- Group Activity
- Profile

**Mockups:**  
Screenshots for these main screens are available in the project README and can serve as reference wireframes for the MVP UI.

---

## System Architecture

### Main Components

- **Front-end:** React (TypeScript, Vite, Tailwind CSS)
  - Handles UI, user interactions, and communicates with Supabase via REST APIs/SDK.
- **Back-end & Database:** Supabase
  - Provides authentication, database (PostgreSQL), storage, and serverless functions.
  - Manages users, groups, activities, transactions, and permissions.
- **External Services:**
  - Email (for notifications, password reset, etc.)
  - Deployment (Railway for hosting)
  - (Optional) Other APIs as needed

### High-Level Architecture Diagram (Text)

```
+-------------------+         REST API/SDK         +-------------------+
|                   | <------------------------->  |                   |
|    Front-end      |                              |     Supabase      |
|  (React, Vite)    |                              | (Auth, DB, Func)  |
|                   | <------------------------->  |                   |
+-------------------+         Responses            +-------------------+
                                                        |
                                                        | (Internal)
                                                        v
                                                +-------------------+
                                                |    Database       |
                                                | (PostgreSQL)      |
                                                +-------------------+
                                                        |
                                                        | (Email, Hosting, etc.)
                                                        v
                                                +-------------------+
                                                | External Services |
                                                | (Email, Railway) |
                                                +-------------------+
```

### Data Flow

- The **Front-end** (React) interacts with **Supabase** via REST API/SDK for authentication, CRUD operations, and storage.
- **Supabase** manages business logic, authentication, and data storage in its PostgreSQL database.
- **Supabase** communicates with **External Services** (e.g., sends emails, deploys to Railway) as needed.

---

## Components, Classes, and Database Design

### Backend Classes

#### User
- **Attributes:** id, username, name, email, password_hash, created_at
- **Methods:** register(), login(), updateProfile(), getFriends(), getGroups()

#### Group
- **Attributes:** id, group_name, creator_id, created_at
- **Methods:** createGroup(), addMember(), removeMember(), getActivities(), getMembers()

#### Friend
- **Attributes:** id, user_id, friend_id, created_at
- **Methods:** addFriend(), removeFriend(), listFriends()

#### Activity (Expense)
- **Attributes:** id, group_id, description, amount, created_by, created_at, is_settled
- **Methods:** addActivity(), updateActivity(), deleteActivity(), listActivities(), splitExpense()

#### Transaction
- **Attributes:** id, activity_id, payer_id, receiver_id, amount, created_at, is_settled
- **Methods:** createTransaction(), settleTransaction(), listTransactions()

#### Settlement
- **Attributes:** id, group_id, user_id, amount, settled_at
- **Methods:** settleUp(), getSettlementStatus()

### Supabase (PostgreSQL) Database Schema

#### users
- id (PK, UUID, required)
- username (string, required, unique)
- name (string, required)
- email (string, required, unique)
- password_hash (string, required)
- created_at (timestamp, required)

#### groups
- id (PK, UUID, required)
- group_name (string, required)
- creator_id (FK -> users.id, required)
- created_at (timestamp, required)

#### group_members
- id (PK, UUID, required)
- group_id (FK -> groups.id, required)
- user_id (FK -> users.id, required)
- joined_at (timestamp, required)

#### friends
- id (PK, UUID, required)
- user_id (FK -> users.id, required)
- friend_id (FK -> users.id, required)
- created_at (timestamp, required)

#### activities
- id (PK, UUID, required)
- group_id (FK -> groups.id, required)
- description (string, required)
- amount (numeric, required)
- created_by (FK -> users.id, required)
- created_at (timestamp, required)
- is_settled (boolean, default false, required)

#### activity_participants
- id (PK, UUID, required)
- activity_id (FK -> activities.id, required)
- user_id (FK -> users.id, required)
- share (numeric, required)

#### transactions
- id (PK, UUID, required)
- activity_id (FK -> activities.id, required)
- payer_id (FK -> users.id, required)
- receiver_id (FK -> users.id, required)
- amount (numeric, required)
- created_at (timestamp, required)
- is_settled (boolean, default false, required)

#### settlements
- id (PK, UUID, required)
- group_id (FK -> groups.id, required)
- payer_id (FK -> users.id, required)      # The user who pays (settles the debt)
- receiver_id (FK -> users.id, required)   # The user who receives the payment
- amount (numeric, required)
- settled_at (timestamp, optional)

### ER Diagram (Text Representation)

```
users
  | 1
  |-------------------< group_members >-------------------|
  |                                                      |
groups                                               friends
  | 1                                                    | 1
  |-------------------< activities >---------------------|
  |                                                      |
activity_participants                                transactions
  |                                                      |
settlements                                              |
```

**Legend:**  
- `A >---< B` means many-to-many via join table.
- `A >--- B` means one-to-many.
- Arrows show foreign key relationships.

**Key Relationships:**
- users/groups: many-to-many via group_members
- users/friends: many-to-many (self-referencing)
- groups/activities: one-to-many
- activities/activity_participants: one-to-many
- activities/transactions: one-to-many
- groups/settlements: one-to-many

### Main Front-end UI Components and Interactions

- **Auth Components:** SignupForm, SigninForm
- **Navigation/Layout:** Topbar, Bottombar, LeftSidebar
- **Home/Dashboard:** Home
- **Group Management:** CreateGroup, GroupDetails, AddMemberForm
- **Activity/Expense Management:** AddExpense, GroupActivity, ActivityCard, Settlement
- **Friends Management:** FriendForm, ShowFriendList, AllFriends
- **Profile Management:** Profile, EditProfile, Profilephoto
- **Shared/UI Components:** UserCard, UserList, PostForm, PostCard, Loader, CircleLoader, Toast, Toaster

---

## Sequence Diagrams

### User Logs In

```
User -> Front-end: Enter email & password
Front-end -> Back-end API: POST /login (credentials)
Back-end API -> Supabase DB: SELECT user WHERE email = ? AND password_hash = ?
Supabase DB --> Back-end API: User record (if valid)
Back-end API --> Front-end: Auth token / error
Front-end --> User: Show login success or error
```

### User Adds a New Group Expense

```
User -> Front-end: Enter expense details (amount, description, group, participants)
Front-end -> Back-end API: POST /groups/:groupId/activities (expense data)
Back-end API -> Supabase DB: INSERT INTO activities (group_id, description, amount, created_by, ...)
Supabase DB --> Back-end API: New activity record
Back-end API -> Supabase DB: INSERT INTO activity_participants (activity_id, user_id, share) for each participant
Supabase DB --> Back-end API: Participant records created
Back-end API --> Front-end: Success response (activity + participants)
Front-end --> User: Show updated group activity list
```

### User Settles a Debt

```
User -> Front-end: Click "Settle Up" (select group, payer, receiver, amount)
Front-end -> Back-end API: POST /settlements (group_id, payer_id, receiver_id, amount)
Back-end API -> Supabase DB: INSERT INTO settlements (group_id, payer_id, receiver_id, amount, settled_at)
Supabase DB --> Back-end API: New settlement record
Back-end API -> Supabase DB: UPDATE transactions SET is_settled = true WHERE group_id = ? AND payer_id = ? AND receiver_id = ?
Supabase DB --> Back-end API: Transactions updated
Back-end API --> Front-end: Success response (settlement + updated transactions)
Front-end --> User: Show updated balances and settlement status
```

---

## API Specifications

### External APIs

| API/Service         | Purpose                                      | Reason for Selection                        |
|---------------------|----------------------------------------------|---------------------------------------------|
| Supabase Auth       | User authentication (sign up, login, JWT)    | Secure, scalable, integrated with database  |
| Supabase Storage    | File uploads (profile photos, attachments)   | Easy integration, managed storage           |
| Email Provider (e.g., SendGrid) | Send email notifications (invites, password reset) | Reliable transactional email delivery       |

**Note:**  
- Supabase is chosen for its managed PostgreSQL, built-in auth, and storage, reducing backend complexity.
- Railway is used for deployment but is not an API consumed at runtime.

### Internal API Endpoints

| URL Path                        | Method | Input Format         | Output Format        | Description                                 |
|----------------------------------|--------|----------------------|----------------------|---------------------------------------------|
| /api/auth/signup                 | POST   | JSON (email, password, name) | JSON (user, token)   | Register a new user                         |
| /api/auth/login                  | POST   | JSON (email, password)       | JSON (user, token)   | Authenticate user, return JWT               |
| /api/users/me                    | GET    | JWT (header)                | JSON (user)          | Get current user profile                    |
| /api/users/me                    | PUT    | JSON (profile fields)        | JSON (user)          | Update current user profile                 |
| /api/friends                     | GET    | JWT (header)                | JSON (friends[])     | List userâ€™s friends                         |
| /api/friends                     | POST   | JSON (friend_id)             | JSON (friend)        | Add a friend                                |
| /api/groups                      | GET    | JWT (header)                | JSON (groups[])      | List userâ€™s groups                          |
| /api/groups                      | POST   | JSON (group_name, members[]) | JSON (group)         | Create a new group                          |
| /api/groups/:groupId             | GET    | JWT (header)                | JSON (group)         | Get group details                           |
| /api/groups/:groupId/activities  | GET    | JWT (header)                | JSON (activities[])  | List group activities                       |
| /api/groups/:groupId/activities  | POST   | JSON (desc, amount, participants[]) | JSON (activity) | Add new group activity/expense              |
| /api/activities/:activityId      | GET    | JWT (header)                | JSON (activity)      | Get activity details                        |
| /api/activities/:activityId      | PUT    | JSON (fields)                | JSON (activity)      | Update activity                             |
| /api/transactions                | GET    | JWT (header)                | JSON (transactions[]) | List userâ€™s transactions                    |
| /api/settlements                 | POST   | JSON (group_id, payer_id, receiver_id, amount) | JSON (settlement) | Settle up debts (payer pays receiver)        |

**All endpoints return errors in JSON format with appropriate HTTP status codes.**

---

## SCM and QA Plans

### SCM Strategy

- **Version Control:** Git (hosted on GitHub or similar)
- **Branching Model:**
  - `main`: Stable, production-ready code
  - `develop`: Integration branch for features before release
  - `feature/*`: One branch per feature or bugfix (e.g., `feature/add-friends`)
- **Workflow:**
  - Developers create feature branches from `develop`
  - Regular commits with clear messages
  - Pull requests (PRs) required to merge into `develop` or `main`
  - Code reviews required before merging PRs
  - All PRs must pass automated tests before merge
- **Release Process:**
  - Merge `develop` into `main` for production releases
  - Tag releases with semantic versioning (e.g., v1.0.0)

### QA Strategy

- **Testing Types:**
  - Unit tests for backend logic (e.g., API endpoints, business logic)
  - Integration tests for end-to-end flows (e.g., user registration, group expense)
  - Manual testing for critical user flows and UI/UX
- **Testing Tools:**
  - **Jest:** Automated unit and integration tests for backend (Node.js/TypeScript)
  - **Supertest:** API endpoint testing
  - **Postman:** Manual and automated API testing
  - **React Testing Library:** Unit tests for React components
- **Continuous Integration (CI):**
  - Automated test suite runs on every PR and push to `develop`/`main`
  - Linting and code style checks (e.g., ESLint, Prettier)
- **Deployment Pipeline:**
  - **Staging:** Auto-deploy from `develop` branch to Railway staging environment for QA
  - **Production:** Auto-deploy from `main` branch to Railway production environment after passing all tests
  - Rollback and monitoring enabled for production deployments

---

## Technical Justifications

- **Supabase:** Chosen for its managed PostgreSQL database, built-in authentication, and storage, which reduces backend complexity and accelerates development.
- **Railway:** Selected for its simple, scalable, and developer-friendly deployment pipeline, supporting both staging and production environments.
- **React (with Vite and Tailwind CSS):** Enables rapid development of a modern, responsive UI with strong community support and efficient build tooling.
- **Testing Tools (Jest, Supertest, Postman, React Testing Library):** Provide comprehensive coverage for backend and frontend, ensuring code quality and reliability.
- **SCM/QA Practices:** Modern Git workflow with code reviews, CI, and automated testing ensures maintainability, collaboration, and high-quality releases.
